uses distributor_proxies.Proxy

uses net.TCPSocket
uses http.handler.GET.HTTPGET

data SetInfoParams {
	ProxyInfo pInfo[]
	char myAddr[]
}

component provides oracle.Mapping requires data.StringUtil strUtil, data.IntUtil iu, io.Output out {
	static Reference refs[] = null
	static PortManager pManager = null
	static Mutex lock = new Mutex()
	ProxyInfo info[] = null

	Reference[] Mapping:getRefs() {
		if (refs == null) { loadRefs() }
		return refs
	}

	void Mapping:setInfos(ProxyInfo newInfo[]) {
		info = newInfo
	}

	void Mapping:setRefsIDC(RefIDC refsIDC[], PortManager portManager) {
		pManager = portManager
		if (refsIDC.arrayLength != refs.arrayLength) {
			throw new Exception("The numbers of RefIDCs is not compatible to the number of references.")
		}
		for (int i = 0; i < refsIDC.arrayLength; i++) {
			refs[i].proxyCl = refsIDC[i].proxyCl
			refs[i].proxySer = refsIDC[i].proxySer
		}
	}

	void loadRefs() {
		refs = new Reference[2]
		refs[0] = new Reference("net", "TCPSocket", "distributor_proxies/TCPSocketCP.o", 
				"distributor_proxies/TCPSocketSP.o", null, typeof(TCPSocket), null, null)
		refs[1] = new Reference("http.handler.GET", "HTTPGET", "distributor_proxies/HTTPGETCPLB.o", 
				"distributor_proxies/HTTPGETSP.o", null, typeof(HTTPGET), null, null)
	}

	bool equalTypes(Type t, Type t2) {
		if ((t.class == t2.class) && (t.flags == t2.flags) && (t.size == t2.size)) {
			if (t.fields.arrayLength == t2.fields.arrayLength) {
				for (int i = 0; i < t.fields.arrayLength; i++) {
					if ((t.fields[i].name == t2.fields[i].name) && (t.fields[i].flags == t2.fields[i].flags)) {
						if (Field.FLAG_RECURSION != t.fields[i].flags) {
							return equalTypes(t.fields[i].type, t2.fields[i].type)
						}
					} else { return false }
				}
			} else { return false }
		} else { return false }
		return true
	}

	// this function will be generated autonomously
	Reference Mapping:getReference(TypeObj to) {
		// this will be the last component generated, it'll contain all interfaces found, both in CST
		// and the local system
		if (equalTypes(to.t, typeof(TCPSocket))) {
			Reference newRef = new Reference()
			newRef.obj = to.o
			newRef.intfPackage = refs[0].intfPackage
			newRef.intf = refs[0].intf
			newRef.proxyClient = refs[0].proxyClient
			newRef.proxyServer = refs[0].proxyServer
			newRef.type = refs[0].type
			newRef.proxyCl = refs[0].proxyCl
			newRef.proxySer = refs[0].proxySer
			return newRef
		} else if (equalTypes(to.t, typeof(HTTPGET))) {
			Reference newRef = new Reference()
			newRef.obj = to.o
			newRef.intfPackage = refs[1].intfPackage
			newRef.intf = refs[1].intf
			newRef.proxyClient = refs[1].proxyClient
			newRef.proxyServer = refs[1].proxyServer
			newRef.type = refs[1].type
			newRef.proxyCl = refs[1].proxyCl
			newRef.proxySer = refs[1].proxySer
			return newRef
		}
		return null
	}

	// how to do this programmatically?
	Object Mapping:getObject(char content[]) {
		String helper[] = strUtil.explode(content, "|")
		char intf[] = helper[0].string
		Object obj
		SetInfoParams sIP = new SetInfoParams()
		//LoadedComponents components
		if (intf == "net.TCPSocket") {
			obj = new TCPSocket() from refs[0].proxyCl
			sIP.pInfo = new ProxyInfo[](new ProxyInfo(helper[1].string, iu.intFromString(helper[2].string)))
			sIP.myAddr = ""
			refs[0].proxyCl.callInterface(obj, "distributor_proxies.Proxy", typeof(distributor_proxies.Proxy), distributor_proxies.Proxy.[setInfo(ProxyInfo[], char[])], sIP)
			return obj
		} else if (intf == "http.handler.GET.HTTPGET") {
			obj = new HTTPGET() from refs[1].proxyCl
			sIP.pInfo = new ProxyInfo[](new ProxyInfo(helper[1].string, iu.intFromString(helper[2].string)))
			sIP.myAddr = ""
			refs[0].proxyCl.callInterface(obj, "distributor_proxies.Proxy", typeof(distributor_proxies.Proxy), distributor_proxies.Proxy.[setInfo(ProxyInfo[], char[])], sIP)
			return obj
		}
		return null
	}

	char[] Mapping:getLocalAddress() {
		return pManager.getLocalAddress()
	}

	ProxyInfo[] Mapping:generatePorts(int num) {
		return pManager.generatePorts(num)
	}

	ProxyInfo[] Mapping:getInfo() {
		return info
	}
}
