// Registry
//
// This component is responsible to keep a list of all live EmergentSys.
// 
// Author: Roberto Rodrigues Filho
// April @ 2017

const char debugMSG[] = "[@Registry]"

const char HELP[]				= "help"
const char REGISTER[] 			= "register"
const char GET_ALL_SERVERS[]	= "get_all_servers"

const char OK_STATUS[] 			= "200 OK"
const char BADREQUEST_STATUS[] 	= "400 Bad Request"
const char NOTFOUND_STATUS[] 	= "404 Not Found"

const int PORT = 2018

data ServerInfo {
	char name[]
	char ip[]
	int port
}

component provides App requires io.Output out, data.IntUtil iu, net.TCPSocket, net.TCPServerSocket,
	data.StringUtil strUtil, http.util.HTTPUtil httpUtil, data.json.JSONParser parser {

	ServerInfo servers[] = null

	char[] getAllServers() {
		return transformStructToJson(servers)
	}

	void register(char server[]) {
		ServerInfo s = new ServerInfo()
		JSONElement jsonRoot = parser.parseDocument(server)
		s.name = parser.getValue(jsonRoot, "name").value
		s.ip = parser.getValue(jsonRoot, "ip").value
		s.port = iu.intFromString(parser.getValue(jsonRoot, "port").value)
		servers = new ServerInfo[](servers, s)
	}

	char[] transformStructToJson(ServerInfo serverList[]) {
		char result[] = new char[]("{",
			"\"metadata\" :", 
			"{\"data_structs\": [{",
			"\"name\" : \"ServerInfo\",",
			"\"attributes\" : [{",
			"\"type\" : \"char\",",
			"\"name\" : \"ip\",\"array\": true},",
			"{\"type\" : \"int\",",
			"\"name\" : \"port\",",
			"\"array\": false},",
			"{\"type\" : \"char\",",
			"\"name\" : \"name\",",
			"\"array\": true",
			"}]}]},",
			"\"values\" : [",
			"{\"type\" : \"ServerInfo\",",
			"\"array\" : true,",
			"\"instances\": [{")
		for (int counter = 0; counter < serverList.arrayLength; counter++) {
			if (counter != 0) { result = new char[](result, "}, {") }
			result = new char[](result, "\"name\": \"", serverList[counter].name, "\",")
			result = new char[](result, "\"ip\": \"", serverList[counter].ip, "\",")
			result = new char[](result, "\"port\": ", iu.intToString(serverList[counter].port))
		}
		result = new char[](result, "}]}]}")
		return result
	}

	HTTPMessage readRequest(TCPSocket client) {
		HTTPMessage msg = clone httpUtil.readHTTPRequest(client)
		/* removes the htdocs path + /registry/ */
		int start = HTTPUtil.htdocs.arrayLength + 10 // 10 = {/registry/}.arrayLength
		if (msg.resource.arrayLength > start) {
			int length = msg.resource.arrayLength - start
			msg.resource = strUtil.subString(msg.resource, start, length)	
		}
		return msg
	}

	char[] removeWhiteSpaces(char msg[]) {
		char result[] = null
		for (int counter = 0; counter < msg.arrayLength; counter++) {
			if (msg[counter] != " ") { result = new char[](result, msg[counter]) }
		}
		return result
	}

	char[] parseCommand(HTTPMessage msg) {
		char result[] = ""
		if (msg.command == "GET") { result = msg.resource }
		else if (msg.command == "POST") {
			if (msg.resource == REGISTER) { result = removeWhiteSpaces(msg.postData) }
			if (result != "") { result = new char[](msg.resource, " ", result) }
		}
		return result
	}

	String[] interpreter(char msg[]) {
		String cmdList[] = strUtil.explode(msg, " ")
		if (cmdList.arrayLength == 1) {
			if (cmdList[0].string == HELP) { return new String[](new String(NOTFOUND_STATUS)) /* TODO */ }
			else if (cmdList[0].string == GET_ALL_SERVERS) {
				out.println("$(debugMSG) Get all servers!")
				return new String[](new String(OK_STATUS), new String(getAllServers()))
			} else { out.println("$(debugMSG) Invalid command.") }
		} else if (cmdList.arrayLength >= 2) {
			if (cmdList[0].string == REGISTER) {
				out.println("$(debugMSG) Registering server!")
				register(cmdList[1].string)
				return new String[](new String(OK_STATUS))
			} else { out.println("$(debugMSG) Invalid command.") }
		} else { out.println("$(debugMSG) Invalid command.") }
		return new String[](new String(BADREQUEST_STATUS))
	}

	void sendResponse(TCPSocket client, char msg[]) {
		client.send(msg)
		client.disconnect()
	}

	char[] formatHTTPResponse(String response[]) {
		char resp[] = null
		if (response.arrayLength > 0) {	resp = new char[]("HTTP/1.0 ", response[0].string, " \r\n")	}
		else { resp = new char[]("HTTP/1.0 ", BADREQUEST_STATUS, " \r\n") }
		resp = new char[] (resp, "Server: Registry v1\r\n", "Content-Encoding: binary\r\n")
		if (response.arrayLength > 1) {
			resp = new char[](resp, "Content-Length: $(iu.intToString(response[1].string.arrayLength))\r\n")
		} else { resp = new char[](resp, "Content-Length: $(iu.intToString(0))\r\n") }
		resp = new char[](resp, "Content-Type: text/json\r\n", "Access-Control-Allow-Origin: *\r\n","\r\n")
		if (response.arrayLength > 1) { resp = new char[](resp, response[1].string) }
		return resp
	}

	String[] execCommand(char command[]) {
		if ((command == null) || (command == "")) {	return new String[](new String(BADREQUEST_STATUS)) }
		return interpreter(command)
	}

	void executor(TCPSocket client) {
		sendResponse(client, formatHTTPResponse(execCommand(parseCommand(readRequest(client)))))
	}

	void serverStart() {
		TCPServerSocket host = new TCPServerSocket()
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, PORT)) {
			out.println("Error: failed to bind master socket")
			return
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) { asynch::executor(client)	}
		}
	}

	int App:main(AppParam params[]) {
		out.println("$(debugMSG) Registry started!")
		out.println("$(debugMSG) Waiting for requests...")
		serverStart()
		return 0
	}
} 
